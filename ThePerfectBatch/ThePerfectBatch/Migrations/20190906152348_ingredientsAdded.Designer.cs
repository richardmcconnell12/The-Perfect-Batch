// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThePerfectBatch.Data;

namespace ThePerfectBatch.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190906152348_ingredientsAdded")]
    partial class ingredientsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ThePerfectBatch.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Quantity")
                        .IsRequired();

                    b.Property<int>("RecipeId");

                    b.HasKey("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new { IngredientId = 1, Name = "Egg", Quantity = "1", RecipeId = 1 },
                        new { IngredientId = 2, Name = "Vanilla Extract", Quantity = "1 Tsp", RecipeId = 1 },
                        new { IngredientId = 3, Name = "Cinnimon Grounds", Quantity = "1/2 Tsp", RecipeId = 1 },
                        new { IngredientId = 4, Name = "Milk", Quantity = "1/4 Cup of Milk", RecipeId = 1 },
                        new { IngredientId = 5, Name = "Bread", Quantity = "4 Slices", RecipeId = 1 },
                        new { IngredientId = 6, Name = "Chickpea Flour", Quantity = "1 Cup", RecipeId = 2 },
                        new { IngredientId = 7, Name = "Water", Quantity = "1 and 1/4 Cups", RecipeId = 2 },
                        new { IngredientId = 8, Name = "Lemon Juice", Quantity = "1 Tbsp", RecipeId = 2 },
                        new { IngredientId = 9, Name = "Salt", Quantity = "1/2 Tsp", RecipeId = 2 },
                        new { IngredientId = 10, Name = "Bread", Quantity = "2 Slices", RecipeId = 3 },
                        new { IngredientId = 11, Name = "Butter", Quantity = "1 Tbsp", RecipeId = 3 },
                        new { IngredientId = 12, Name = "Cheese of Choice", Quantity = "2 Slices", RecipeId = 3 },
                        new { IngredientId = 13, Name = "Skinless Chicken Breast", Quantity = "4", RecipeId = 4 },
                        new { IngredientId = 14, Name = "Salt and Pepper", Quantity = "To Taste", RecipeId = 4 },
                        new { IngredientId = 15, Name = "Eggs", Quantity = "2", RecipeId = 4 },
                        new { IngredientId = 16, Name = "Bread Crumbs", Quantity = "1 and 1/4 Cup", RecipeId = 4 },
                        new { IngredientId = 17, Name = "Grated Parmesean Cheese", Quantity = "1/2 Cup", RecipeId = 4 },
                        new { IngredientId = 18, Name = "Flour", Quantity = "2 Tbsp", RecipeId = 4 },
                        new { IngredientId = 19, Name = "Olive Oil for Frying", Quantity = "1 Cup", RecipeId = 4 },
                        new { IngredientId = 20, Name = "Tomato Sauce", Quantity = "1/2 Cup", RecipeId = 4 },
                        new { IngredientId = 21, Name = "Cubed Mozzarella", Quantity = "1/4 Cup", RecipeId = 4 },
                        new { IngredientId = 22, Name = "Basil", Quantity = "1/4 Cup", RecipeId = 4 },
                        new { IngredientId = 23, Name = "Provolone Cheese", Quantity = "1/2 Cup", RecipeId = 4 },
                        new { IngredientId = 24, Name = "Grated Parmesean Cheese", Quantity = "1/2 Cup", RecipeId = 4 },
                        new { IngredientId = 25, Name = "Olive Oil", Quantity = "1 Tbsp", RecipeId = 4 },
                        new { IngredientId = 26, Name = "Butter", Quantity = "1 Cup", RecipeId = 5 },
                        new { IngredientId = 27, Name = "White Sugar", Quantity = "1 Cup", RecipeId = 5 },
                        new { IngredientId = 28, Name = "Brown Sugar", Quantity = "1 Cup", RecipeId = 5 },
                        new { IngredientId = 29, Name = "Egg", Quantity = "2", RecipeId = 5 },
                        new { IngredientId = 30, Name = "Vanilla extract", Quantity = "2 Tsp", RecipeId = 5 },
                        new { IngredientId = 31, Name = "Baking Soda", Quantity = "1 Tsp", RecipeId = 5 },
                        new { IngredientId = 32, Name = "Hot Water", Quantity = "1 Tsp", RecipeId = 5 },
                        new { IngredientId = 33, Name = "Salt", Quantity = "1/2 Tsp", RecipeId = 5 },
                        new { IngredientId = 34, Name = "Flour", Quantity = "3 Cups", RecipeId = 5 },
                        new { IngredientId = 35, Name = "Chocolate Chips", Quantity = "2 Cups", RecipeId = 5 },
                        new { IngredientId = 36, Name = "Chopped Walnuts", Quantity = "1 Cup", RecipeId = 5 }
                    );
                });

            modelBuilder.Entity("ThePerfectBatch.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<int>("RecipeTypeId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("RecipeId");

                    b.HasIndex("RecipeTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe");

                    b.HasData(
                        new { RecipeId = 1, DateCreated = new DateTime(2019, 9, 6, 10, 23, 47, 376, DateTimeKind.Local), Image = "images/FrenchToast.jpg", Name = "French Toast", RecipeTypeId = 1, UserId = "00000000-ffff-ffff-ffff-ffffffffffff" },
                        new { RecipeId = 2, DateCreated = new DateTime(2019, 9, 6, 10, 23, 47, 380, DateTimeKind.Local), Image = "images/ChickpeaCrepe.jpg", Name = "Crepes", RecipeTypeId = 2, UserId = "00000000-ffff-ffff-ffff-ffffffffffff" },
                        new { RecipeId = 3, DateCreated = new DateTime(2019, 9, 6, 10, 23, 47, 380, DateTimeKind.Local), Image = "images/GrilledCheese.jpg", Name = "Grilled Cheese", RecipeTypeId = 3, UserId = "00000000-ffff-ffff-ffff-ffffffffffff" },
                        new { RecipeId = 4, DateCreated = new DateTime(2019, 9, 6, 10, 23, 47, 380, DateTimeKind.Local), Image = "images/ChickenParm.jpg", Name = "Chicken Parmesean", RecipeTypeId = 4, UserId = "00000000-ffff-ffff-ffff-ffffffffffff" },
                        new { RecipeId = 5, DateCreated = new DateTime(2019, 9, 6, 10, 23, 47, 380, DateTimeKind.Local), Image = "images/ChocolateChipCookie.jpg", Name = "Chocolate Chip Cookies", RecipeTypeId = 5, UserId = "00000000-ffff-ffff-ffff-ffffffffffff" }
                    );
                });

            modelBuilder.Entity("ThePerfectBatch.Models.RecipeType", b =>
                {
                    b.Property<int>("RecipeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("RecipeTypeId");

                    b.ToTable("RecipeType");

                    b.HasData(
                        new { RecipeTypeId = 1, Name = "Breakfast" },
                        new { RecipeTypeId = 2, Name = "Brunch" },
                        new { RecipeTypeId = 3, Name = "Lunch" },
                        new { RecipeTypeId = 4, Name = "Dinner" },
                        new { RecipeTypeId = 5, Name = "Desert" }
                    );
                });

            modelBuilder.Entity("ThePerfectBatch.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new { Id = "00000000-ffff-ffff-ffff-ffffffffffff", AccessFailedCount = 0, ConcurrencyStamp = "90fa8349-72c8-4b46-9ae8-687f8deefae3", Email = "mr.mcconnell@internet.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "MR.MCCONNELL@INTERNET.COM", PasswordHash = "AQAAAAEAACcQAAAAEBE37eACdCMu5pv/wBPDH5Z3aj8rW8bhgtW+3ATwkw0ZRssctDnxRXlPKBLC8Sn5MA==", PhoneNumberConfirmed = false, SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794577", TwoFactorEnabled = false, FirstName = "Ricky", LastName = "McConnell" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ThePerfectBatch.Models.Ingredient", b =>
                {
                    b.HasOne("ThePerfectBatch.Models.Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ThePerfectBatch.Models.Recipe", b =>
                {
                    b.HasOne("ThePerfectBatch.Models.RecipeType")
                        .WithMany("Recipes")
                        .HasForeignKey("RecipeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ThePerfectBatch.Models.ApplicationUser", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
